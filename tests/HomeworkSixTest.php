<?php

declare(strict_types=1);

use PHPUnit\Framework\TestCase;
use Sapronovps\OtusHomework\HomeworkFive\IoC;
use Sapronovps\OtusHomework\HomeworkSix\AutoGenerateClass;
use Sapronovps\OtusHomework\HomeworkSix\TankOperationsMovableInterface;
use Sapronovps\OtusHomework\HomeworkSix\TankOperationsMovableWithChangeInterface;
use Sapronovps\OtusHomework\HomeworkTwo\Vector;

class HomeworkSixTest extends TestCase
{
    /**
     * Тест - проверка автоматической генерации PHP класса по заданному контракту.
     *
     * @return void
     */
    public function testOne(): void
    {
        $classGenerator = new AutoGenerateClass(TankOperationsMovableInterface::class);
        $phpCode = $classGenerator->generateClassStr();
        eval($phpCode);

        $vector = new Vector();
        $ioC = new IoC();
        $adapterClass = 'AutoGeneratedTankOperationsMovableInterface';
        $adapter = new $adapterClass($vector, $ioC);

        $this->assertEquals($adapterClass, $adapter::class);
    }

    /**
     * Тест - Экземпляры генерируемых оберток для объекта obj можно создавать следующей строкой
     * $ioC->resolve('Adapter', TankOperationsMovableInterface::class);
     *
     * @return void
     * @throws Exception
     */
    public function testTwo(): void
    {
        // Зарегистрируем класс авто-генератора классов PHP в IoC контейнере
        $prefixClass = 'AutoGeneratedTest';
        $ioC = new IoC();
        $ioC->resolve(IoC::IOC_REGISTER, 'Adapter', function ($class) use ($prefixClass) {
            return (new AutoGenerateClass($class, $prefixClass))->generateClassStr();
        });

        // Вернем автоматически-сгенерируемый адаптер по заданному контракту
        $adapterPhpCode = $ioC->resolve('Adapter', TankOperationsMovableInterface::class);
        eval($adapterPhpCode);

        $vector = new Vector();
        $adapterClass = $prefixClass . 'TankOperationsMovableInterface';
        $adapter = new $adapterClass($vector, $ioC);

        $this->assertEquals($adapterClass, $adapter::class);
    }

    /**
     * Тест - если интерфейсе потребуются какие-либо методы, например, как finish();
     * AutoGenerateClass подстраивается под все изменения.
     *
     * @return void
     */
    public function testThree(): void
    {
        $classGenerator = new AutoGenerateClass(TankOperationsMovableWithChangeInterface::class);
        $phpCode = $classGenerator->generateClassStr();
        eval($phpCode);

        $vector = new Vector();
        $ioC = new IoC();
        $adapterClass = 'AutoGeneratedTankOperationsMovableWithChangeInterface';
        $adapter = new $adapterClass($vector, $ioC);

        $this->assertEquals($adapterClass, $adapter::class);
    }
}